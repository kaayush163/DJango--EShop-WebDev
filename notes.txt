We can't do multiplication,subtraction, addition in template zinga


FILTER BIGGEST USE IS EXPLANED VIDEO 49 that instead of changing money sign Rs. (by going in every table ) instead of this we change directly to filter template tags one line an can be changed to wherever it is used int he table with money sign

admin-aayush
password = 123


write extends instead extend in zinga template

from django.shortcuts import redirect
        return redirect('homepage')  #rember instead writing like this redirect("http:localhost:8000") we do by setting name parameter in urls.patterns with the same name as here

{{product | is_in_cart:request.session.cart}} space should not be there between is_in_cart and : and : and request.session.cart

python mange.py makemigrations
python manage.py migrate
Wheneev little changes even do make migrations and migrate

css 
if do like this 
<div class="container-fluid mt-3">  //mt-3 means margin from top
<div class="row mx-auto">  mx auto gives space between the two adjacent image in row
    <div class="card mx-auto mb-3"> it will show card according rowise
mb-3 gives bottom space 3 mm


Read from here
https://docs.djangoproject.com/en/5.0/



we ahve to create app so to amnage different differnt sections like in ecommerse we ahve to amnage stores payments dispaly etc

Go to sqlliteonline.com   https://sqliteonline.com/

powerful website tos ee the table on any database

for creatifnf django username and password write command python manage.py createsuperuser
Error comes because no databse is created db sqlite (it is empty) so first need to created table to create superuser


python manage.py makemigrations
No changes deteched because notheng operation has done on table

so first run this command 
python manage.py migrate

now see in sqliteonline.com and select the file dq.sqlite3 will see so many tables has been giving by django

Now run python manage.py createsuperuser
Username:- 
Email address:- 

now will see on added to the sqliteonline.com by selecting db.sqlite3 file again now its added
and go to localhost:8000/admin and now can regeiter in django adminstration easily 



Models creation

Difference between package and directory

models.py remove it from store folder and create package folder "models"

in that create product.py and write code(take helpin from django dicumentation)
and define different parameters related to product detail but on python mange.py makemigrations still no changes detected because we ahve to write __init__.py also from there it initializes

Importance of __init__.py


IMP ISSUES FACED BY MANY
now write from .product import Product now run makemigrations command now it will give some action
even if not updating makemigrations then check in Eshop settings INSTALLED_APPS=[] need to add app here like 'store' add here also then that will work
If still not updating then write this python manage.py makemigrations store




Not: when using image field for uploading image we have to use third party pillow


then run python mange.py migrate







Admin not showing product row in url localhost:8000/admin  evn created Models structure weel 
so for this we ahve to go for store app and in admin.py we ahve to add soem commeands

from django.contrib import admin
from .models.product import Product
# Register your models here.
admin.site.register(Product)

no go back to admin url and there it willbe rpesent and can be ab=vailable to add items now


For category again mdoels create file category.py then again run 
python manage.py makemigrations
python mange.py migrate
these two commands always run on every chanegs amde







Foreign Key
 https://sentry.io/answers/django-on-delete/

If not working giving some issue best to delete all migrations files except __Init__.py and delete dq.sqlite3 then run python mangae.oy makemigrations python manag.py migrate






Handling Requests

Lecture 10
Serving html page

Eshop -> urls.py
same create in store app urls.py file that url fucntion will be call on view.py of store app
so add print in view.py but it will still not render on '/' this url of localhost

so for doing this lets go back to the Eshop->urls.py and add include package import (from .... import) and in urlpatters add the path('',include('store.urls'))   //appname.fileyou want to render

jab bhi koi request iss '' path par aaega to yeh pstore app ke urls ko check kargea so then in stroe urls.py which says to run index fucntion now

Now request recived printed at terminal but show error at webpage because it not sending any response so for that we do import HTTPRESPONSE in View.py in store app 

from django.http import HttpResponse  add in view.py


create templates folder in store app make one html file and do any heading provide there

Now go to view.py of store app and render     return render(request,'index.html')  this will automatically render through the templates folder to index.html we didnt need to paass the \templates like this this is magic of django it understand the html page render by default at templates folder


#Best to read anfd focus more o DJANGO DOCUMENTATION`






Lecture 12 Adding bootstrap

to get all products from admin/products
we will go to product.py of astore app
 and do @staticmethod
     def get_all_products():
        return Product.objects.all()

and then in view.py of stroe app 
from .models.product import Product
def index(request):
    prds = Product.get_all_products() 
    print(products)
return render(request, 'index.html',{'products':prds}


No go to index.html and have to use jinga template passing the key products







Lecture 14 adidng navbar and image fixing
since adding products.image.url still wont work so for that we have to add static MEDIA URL (can read from django documentation) in ESHOP->urls.py

from django.contrib import admin
from django.urls import path,include
from django.conf.urls.static import static
from . import settings

urlpatterns = [
    path('admin/', admin.site.urls),
    path('',include('store.urls'))
]+ static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)


now in settings.py we have to add static media url too after adding in urls.py
add after STATIC_URL line alreayd was present
MEDIA_URL = '/abcd/' anything you can give(/image/donwload/ isse end users ko pta hi nahi chalega where is images located 
MEDIA_ROOT = BASE_DIR

always write extends not extend in zinda template




Lecture -17 Get product by id
Very important do in index.html  <a href="/?category={{category.id}}"
            class="list-group-item list-group-item-action">{{category.name}}</a>     
a href use /?category={{category.id}}


in view.py add these
categoryID = request.GET['category'] - X   this will throw error multiDIct Value
MultiVal key DICT error comes at view.py categoryID = request.GET['category']

categoryID = request.GET.get('category') - OK
    if categoryID:
        prds = Product.get_all_products_by_categoryid(categoryID)
    else:
        prds = Product.get_all_products()


for showing all products we will do in index.html
<a href="/" class="list-group-item list-group-item-action">All Products</a>
we have done href="/" because for showing all products we have to be on same home apge




Lecture 18 serving signup page
for doing that we use view.py and urls.py and created signup.html in templeates these are basic things need to to know at every step


Lecture 19customer class creating
similar in models we create cutoemrs.py adn make class in it and in init.py we import cutomer

and do python mange.py makemigrations
python manage.py migrate


CSRF handled inside form of index.html for form submission donning successfully



 TO SAVE FORM DATA
(a) in models-> customer.py we define register fucntion(self): sel.save()
(b) we can create object in view.py




Lecture 22 Validation of form datas (email,phone,name) done on server side (store app view.py)
TO show error message we go to signup.html
{% if error%}
                <div class="alert alert-danger" role="alert">
                    {{error}}
                </div>
                {% endif %}

since when erro comes in any form data field it reloads the whole signup.html
and again have to fill all data
so for stopping this issue we want to empty only that string whose valuen  is coming incorrect
value="{{values.last_name}}" add this in signup.html <input value=""> like this this will not allow to make empty other strings when any specific data value string put incorrect
 

value = {
           'first_name' : first_name,
           'last_name' : last_name,
           'phone' :phone,
           'email' : email
       }


data = {
               'error': error_message,
               'values': value
           } 


Now again problems comes when on submitting form with fillong values on rendering the page to the index.html
the categories are not showing so we ahev to redirect('http:localhost:8000') not a goodd method 
so we paass name in urls.py and redirect(homepage) 
path('',index,name='homepage') add name='homepage' in urls.py






Lecture 26 Email Validation

For email validation to check if no email is already present

@staticmethod
    def get_customer_by_email(email):
        # return Customer.objects.filter(email = self.email)
        try:
            print("checking customers objects",Customer.objects)
            return Customer.objects.get(email=email)
        except:
            return False
        # return Customer.objects.get(email = self.email)  # by filter we get list of objects but we want only one object so we use get



customer.py of models do this 
def isExists(self):
        if Customer.objects.filter(email = self.email):   #care its objects not object
            return True

        return False


then in view.py of store app before 

 elif customer.isExists():
           error_message = 'Email already registered' before       if not error_message






Lecture 27 password hashing by make_password and then check hased password and input password with help of check_password
from django.contrib.auth.hashers import make_password , check_password


if not error_message:  add this before register
            customer.password = make_password(customer.password)






Whenever post request we have need of CSRF_token





Now for login set url on urls.py







Lecture 32 class based structure

First fior login then signup

from django.views import View  #importing class


class Login(View): #subclass of login is view class
    def get(self,request):
        # pass
        return render(request, 'login.html')


    def post(self,request):
        #pass  
        email = request.POST.get('email')
        password = request.POST.get('password')
        customer = Customer.get_customer_by_email(email)
        error_message = None
        if customer:
            flag = check_password(password, customer.password)

            if flag:
                # pass
                return redirect('homepage')
            else:
                error_message = 'Email or Password is invalid'
        else:
            error_message = 'Email or Password is invalid'

        
        print(customer)
        print(email,password)

        return render(request, 'login.html',{'error':error_message}) 

and add in urs.py
    path('login', Login.as_view())



Lecture 35 Separated all views function in separate files home,signup,login




Lecture 36
Session add in views -> login.py
                request.session['customer'] = customer but on login type error comes object of type customer is not JSON serilizable

so try to save only email and id in session
	if flag:
                request.session['customer_id'] = customer.id
                request.session['email'] = customer.email

now in home.html
    print('you are:',request.session.get('email'))  #the login email will show on terminal
add this after these lines data = {}
    data['products'] = prds
    data['categories'] = categories

to check if it works or not try to run localhost:8000 in incognito and there you see the login email will show None








Lecture 37 - add to cart showing on terminal number of counts of product id in dicytionary format on home.html post method




Lecture 38 Creating filter for carts and products(VERY HRD CONCEPT

Very hard concept comes now FILTER 

first create folder templatetags and file create cart.py
and write these codes

from django import template
#this register is a decrator
register = template.Library()

@register.filter(name='is_in_cart')  # this @ is used for filter decorator    when we use in template then it is called in the below fucntion according matching name this is is use of decrator
def is_in_cart(product,cart):   #cart is the dictionary having key values defiend home.html 
    
    keys= cart.keys()

    print(keys)

    return True

and add {% load cart %} in index.html below block content(this indicate we are adding filter) by doing load filename in templatetags(that is cart
 and add  {{product | is_in_cart:request.session.cart}} before form and after p tag it will call to the templatetag (take care here space shpuld npot be there between is_in_cart and : and : and request.session.cart  
product is the value and is_in_cart is the function
request.session.cart means cart jo hai session mein hai so waha se pass karna hai function is_in_cart mein
isse cart object mil jaega


Now need to write logic cart.py templatetags file that if product is presnet in cart or not


(THIS IS THE MOST IMPORTANT THING TO UNDERSTAND)
<div class="card-footer p-0 no-gutters">
                
                {% if product|is_in_cart:request.session.cart %}     -> this is for if condition got true means a particular product already there int he cart
                <div class="row no-gutters">
                    <input type="submit" value="-" class="col-2 btn btn-block btn-secondary" >
                    <div class="text-center col">{{product|cart_quantity:request.session.cart}}</div>       ---->  This filter for displaying how many that particular item is adding when doing + and -
                    <input type="submit" value="+" class="col-2 btn btn-block btn-secondary" >
                </div>
                
                {% else %}
                <form action="/" method="POST" class="btn-block" > 
                    {%csrf_token%}
                    <input hidden type="text" name="product" value="{{product.id}}">
                    <input href="#" type="submit" class="float-right btn btn-light border form-control btn-sm" value="Add to Cart">
                </form>
                {% endif %}
            </div>











Lecture 39  Increment and decrement button for filter crt add or subtract

VERY HARD VERY HARD PLS REVISE THIS VIDEO SO MUCH CHANGES HAVE BEEN DONE AND SO MUH TO UNDERSTAND

so much changes of cretingg form for + nd - in index.html and then home.py write logic for quantity-1 and quantity+1 on if elsecondition





Lecture 40 we have to navigate to the same product without reloading the page comes at the top

we can use #id concept like we do in reactjs

we do jumbo template use








Lecture 41  we are doing hiding login and signup (becoz generally when user login in a website the login and signup dont show up more it vanishes

                request.session['customer'] = customer.id  do it in login.py

and go to now base.html   
              
 </li>
        {% if request.session.customer %}
        
        <li class="nav-item ">
          <a class="nav-link" href="/orders">Orders<span class="sr-only">(current)</span></a>
        </li>
        <li class="nav-item ">
          <a class="nav-link" href="/logout">Logout<span class="sr-only">(current)</span></a>
        </li>
        {% else %}
       
        <li class="nav-item ">
          <a class="nav-link" href="/signup">Signup<span class="sr-only">(current)</span></a>
        </li>
        <li class="nav-item ">
          <a class="nav-link" href="/login">Login<span class="sr-only">(current)</span></a>
        </li>
        {% endif %}









lecture 42 logout implemet

write below login these commands in login.py in views folder
def logout(request):
    #sesison ko clearnkarna this is logout logic

    request.session.clear()

    return redirect('login')


add urls.py this commands
from .views.login import logout
path('logout',logout, name='logout'),






Leecture 43 Cart implemt with cart.html,cart.py,urls.py

add logic for getting cart items by product.id
add @register.filter(name='is_in_cart')
def is_in_cart(product,cart):


cart.html


make cart class in file cart.py in views
class Cart(View): #subclass of login is view class
    def get(self,request):
        # pass

        #print(request.session.cart) - this is wrong
        print(request.session.get('cart')) #this is correct
                                           #{'1':1, '2':1 } '1' is product id is showing we need that so 

        print(request.session.get('cart').keys()) #so we get product id in dictionary list
        
        ids = list(request.session.get('cart').keys())
        products = Product.get_products_by_id(ids)
        print(products)
        return render(request, 'cart.html')







Lecture 44 Cart items need to displayed 





lecture 45 




Lecture 49 currency filter


{% load custom_filter %} at top of cart.html and wherever you use currency like in index.html also put this on top
                <p class="card-text"><b>{{product.price|currency}}</b></p> in index.html 34 line


cart.html and custom_filter.py instead of changing any dolalr sign and rupees sin in html better to do in filter file directly oin one place only this is the biggest use of filter 











Lecture 50 order 

create order.py in models and add in __init__.py for orders too
then come  admin.py and add for order 

by this we can add in admin of localhost:8000 

go to localhost:8000/admin









Lecture 51 Model

cart.html last part adding model


<div class="m-3 p-3">
            <a href="#" data-toggle="modal" data-target="#exampleModal" class="btn btn-outline-info border rounded  col-lg-3 float-right">Check out</a>  

this exampleModal dshould be same as modal id 
        </div>



<!-- modal -->
 <!-- we commented this below becoz we want to open modal form on checkout button not on this bootstrap button -->
<!-- <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#exampleModal">
  Launch demo modal
</button> -->





lecture 52 place order
checkout same gp to urls.py and fll urls pattern
and then in views doc heckout.py and write class in it 
then for orders create models got o model and orders .py create

order.html copy contentsd of customer.html to it and delete some things like footer and 
make sure class name and models table name should not be same that why ii write class name OrderView and model name is Order

in orders.html write loop for orders(taken from OrderView cklass

{% for order in orders %}
                <tr>
                    <td>{{forloop.counter}}</td>
                    <td><img style="height: 80px;" class="rounded-circle" src="{{order.product.image.url}}" alt=""></td>
                    <td>{{order.product.name}}</td>
                    <td>{{order.date}}</td>
                    <td>{{order.price|currency}}</td>
                    <td>{{order.quantity}}</td>
                    <td>{{order.quantity|multiply:order.price|currency}}</td>
                    {% if order.status %}
                    <td><small class="badge badge-success">Completed</small></td>
                    {%else%}
                    <td><small class="badge badge-warning">Pending</small></td>
                    {% endif %}
                </tr>

@staticmethod
    def get_orders_by_customer(customer_id):
        #need to filter so 
        return Order.objects.filter(customer = customer_id).order_by('-date')  # minus as followed by date to order the products by their date in decreasing order means recent item added should be shown at first like that




lecture 53 Middlewares
middlewares folder create and then auth.py in write from dociumentation of django
and got o settings and add in middlewares = []     'store.middlewares.auth.auth_middleware'
but comment this part of settings one because we dont want to run middleware for every thing we need only for orders 


we use decrotator in orders.py of views.py
from store.middlewares.auth import auth_middleware #we use this when there is funnction meqans outside of class inisde of class it is called method not function so we cant not use it instead we use below one

class OrderView(View):
    # @auth_middleware
    @method_decorator(auth_middleware)
    def get(self,request):
        customer = request.session.get('customer')
        orders = Order.get_orders_by_customer(customer)
        print(orders)
        return render(request,'orders.html',{'orders':orders}) #important to pass this orders object so that can be used in zinga template orders.html
so instead of only passing auth_middleware we pass like this
    @method_decorator(auth_middleware)


But the bigger problem if one want to use middleare in more things then it will be hectic to write above every method inside classs
so for that we would use auth_middleware in urls.py file 



#55 video see again if doubt
Lecture 54b Very IMP logic if again want to logic so it should be on same page let say orders as it was on previou time

RETURN URL short concept but V IMP FOr PROFESSIONAL LOOK OF WEBPAGE
